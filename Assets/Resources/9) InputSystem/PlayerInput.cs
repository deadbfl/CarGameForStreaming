//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Resources/9) InputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Car"",
            ""id"": ""ba6b28c2-dd69-40d4-ac02-0e9116b8c4b2"",
            ""actions"": [
                {
                    ""name"": ""GasPedal"",
                    ""type"": ""Value"",
                    ""id"": ""00dec75a-e278-461e-966c-3bd9ab36e6c2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""BrakePedal"",
                    ""type"": ""Value"",
                    ""id"": ""6406a71a-17d8-484c-aa05-85c89a397d11"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Steering"",
                    ""type"": ""Value"",
                    ""id"": ""24f7b2ec-cebe-4d13-82d9-c5c8b261c1b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ClutchPedal"",
                    ""type"": ""Value"",
                    ""id"": ""5eedb0ca-9142-495c-978a-2dd125463be2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearUp"",
                    ""type"": ""Value"",
                    ""id"": ""90f1b0f5-8ce6-42b4-a234-a8f94d9306fa"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GearDown"",
                    ""type"": ""Value"",
                    ""id"": ""16532e7d-e3eb-4801-9a86-329665915f34"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""576751db-10af-44e4-8da9-e42d91302dc7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GasPedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""81197ea9-b983-40e8-86cc-dd4b7ff50799"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GasPedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdf5a07a-da60-44b3-94e4-9612da8a4092"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrakePedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2271991c-8b2e-4cc0-983d-39cc5cc03b13"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BrakePedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""85430d26-c757-4010-8c2f-d793f43d2f53"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""76c6af58-04fe-4617-b177-7231e56ea914"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f257ec55-444a-4c63-89e6-718045248d99"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b6285950-b71f-433a-9c1a-4af05607eddc"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steering"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3377a22-d3ad-4c53-a73d-a7c4d753f8c1"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClutchPedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c11b8732-0ace-4914-a73c-353e232048ae"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClutchPedal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d60f9d1a-b108-4987-b059-ae757dfc407a"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GearUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32c6d894-ead4-40d1-993f-dc87a99f6960"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GearUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""deff495f-45ff-4d06-b49b-611c1a6fe88e"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GearDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c59157f2-cdc3-4f64-a522-f0d97e0c330e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GearDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""78dd3b86-af4c-4e64-a7ca-48f3861c8c43"",
            ""actions"": [
                {
                    ""name"": ""OnCameraRotate"",
                    ""type"": ""Value"",
                    ""id"": ""4e755dfb-456b-4fda-ae4c-1c3beedceaea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""20c53c4a-21fa-422e-9fbb-c2484adf332c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnCameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a41bc61e-e6bf-4247-8008-901f561c8ce3"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OnCameraRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Car
        m_Car = asset.FindActionMap("Car", throwIfNotFound: true);
        m_Car_GasPedal = m_Car.FindAction("GasPedal", throwIfNotFound: true);
        m_Car_BrakePedal = m_Car.FindAction("BrakePedal", throwIfNotFound: true);
        m_Car_Steering = m_Car.FindAction("Steering", throwIfNotFound: true);
        m_Car_ClutchPedal = m_Car.FindAction("ClutchPedal", throwIfNotFound: true);
        m_Car_GearUp = m_Car.FindAction("GearUp", throwIfNotFound: true);
        m_Car_GearDown = m_Car.FindAction("GearDown", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_OnCameraRotate = m_Camera.FindAction("OnCameraRotate", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Car.enabled, "This will cause a leak and performance issues, PlayerInput.Car.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, PlayerInput.Camera.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Car
    private readonly InputActionMap m_Car;
    private List<ICarActions> m_CarActionsCallbackInterfaces = new List<ICarActions>();
    private readonly InputAction m_Car_GasPedal;
    private readonly InputAction m_Car_BrakePedal;
    private readonly InputAction m_Car_Steering;
    private readonly InputAction m_Car_ClutchPedal;
    private readonly InputAction m_Car_GearUp;
    private readonly InputAction m_Car_GearDown;
    public struct CarActions
    {
        private @PlayerInput m_Wrapper;
        public CarActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @GasPedal => m_Wrapper.m_Car_GasPedal;
        public InputAction @BrakePedal => m_Wrapper.m_Car_BrakePedal;
        public InputAction @Steering => m_Wrapper.m_Car_Steering;
        public InputAction @ClutchPedal => m_Wrapper.m_Car_ClutchPedal;
        public InputAction @GearUp => m_Wrapper.m_Car_GearUp;
        public InputAction @GearDown => m_Wrapper.m_Car_GearDown;
        public InputActionMap Get() { return m_Wrapper.m_Car; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarActions set) { return set.Get(); }
        public void AddCallbacks(ICarActions instance)
        {
            if (instance == null || m_Wrapper.m_CarActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CarActionsCallbackInterfaces.Add(instance);
            @GasPedal.started += instance.OnGasPedal;
            @GasPedal.performed += instance.OnGasPedal;
            @GasPedal.canceled += instance.OnGasPedal;
            @BrakePedal.started += instance.OnBrakePedal;
            @BrakePedal.performed += instance.OnBrakePedal;
            @BrakePedal.canceled += instance.OnBrakePedal;
            @Steering.started += instance.OnSteering;
            @Steering.performed += instance.OnSteering;
            @Steering.canceled += instance.OnSteering;
            @ClutchPedal.started += instance.OnClutchPedal;
            @ClutchPedal.performed += instance.OnClutchPedal;
            @ClutchPedal.canceled += instance.OnClutchPedal;
            @GearUp.started += instance.OnGearUp;
            @GearUp.performed += instance.OnGearUp;
            @GearUp.canceled += instance.OnGearUp;
            @GearDown.started += instance.OnGearDown;
            @GearDown.performed += instance.OnGearDown;
            @GearDown.canceled += instance.OnGearDown;
        }

        private void UnregisterCallbacks(ICarActions instance)
        {
            @GasPedal.started -= instance.OnGasPedal;
            @GasPedal.performed -= instance.OnGasPedal;
            @GasPedal.canceled -= instance.OnGasPedal;
            @BrakePedal.started -= instance.OnBrakePedal;
            @BrakePedal.performed -= instance.OnBrakePedal;
            @BrakePedal.canceled -= instance.OnBrakePedal;
            @Steering.started -= instance.OnSteering;
            @Steering.performed -= instance.OnSteering;
            @Steering.canceled -= instance.OnSteering;
            @ClutchPedal.started -= instance.OnClutchPedal;
            @ClutchPedal.performed -= instance.OnClutchPedal;
            @ClutchPedal.canceled -= instance.OnClutchPedal;
            @GearUp.started -= instance.OnGearUp;
            @GearUp.performed -= instance.OnGearUp;
            @GearUp.canceled -= instance.OnGearUp;
            @GearDown.started -= instance.OnGearDown;
            @GearDown.performed -= instance.OnGearDown;
            @GearDown.canceled -= instance.OnGearDown;
        }

        public void RemoveCallbacks(ICarActions instance)
        {
            if (m_Wrapper.m_CarActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICarActions instance)
        {
            foreach (var item in m_Wrapper.m_CarActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CarActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CarActions @Car => new CarActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_OnCameraRotate;
    public struct CameraActions
    {
        private @PlayerInput m_Wrapper;
        public CameraActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @OnCameraRotate => m_Wrapper.m_Camera_OnCameraRotate;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @OnCameraRotate.started += instance.OnOnCameraRotate;
            @OnCameraRotate.performed += instance.OnOnCameraRotate;
            @OnCameraRotate.canceled += instance.OnOnCameraRotate;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @OnCameraRotate.started -= instance.OnOnCameraRotate;
            @OnCameraRotate.performed -= instance.OnOnCameraRotate;
            @OnCameraRotate.canceled -= instance.OnOnCameraRotate;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface ICarActions
    {
        void OnGasPedal(InputAction.CallbackContext context);
        void OnBrakePedal(InputAction.CallbackContext context);
        void OnSteering(InputAction.CallbackContext context);
        void OnClutchPedal(InputAction.CallbackContext context);
        void OnGearUp(InputAction.CallbackContext context);
        void OnGearDown(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnOnCameraRotate(InputAction.CallbackContext context);
    }
}
